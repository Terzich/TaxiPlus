// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiPlus.DAL.Database;

namespace TaxiPlus.DAL.Migrations
{
    [DbContext(typeof(TaxiPlusDbContext))]
    [Migration("20211217214019_Data-Seed")]
    partial class DataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacturing")
                        .HasMaxLength(2021)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarManufacturerId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarManufacturerId = 1,
                            CarName = "Mercedes CLK 250",
                            CarTypeId = 3,
                            ColorId = 1,
                            FuelTypeId = 1,
                            NumberOfDoors = 5,
                            PricePerDay = 50,
                            YearOfManufacturing = 2017
                        },
                        new
                        {
                            Id = 2,
                            CarManufacturerId = 4,
                            CarName = "Golf MK 7",
                            CarTypeId = 1,
                            ColorId = 3,
                            FuelTypeId = 2,
                            NumberOfDoors = 5,
                            PricePerDay = 50,
                            YearOfManufacturing = 2016
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.CarManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("carManufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManufacturerName = "Mercedes"
                        },
                        new
                        {
                            Id = 2,
                            ManufacturerName = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            ManufacturerName = "Audi"
                        },
                        new
                        {
                            Id = 4,
                            ManufacturerName = "Volkswagen"
                        },
                        new
                        {
                            Id = 5,
                            ManufacturerName = "Toyota"
                        },
                        new
                        {
                            Id = 6,
                            ManufacturerName = "Honda"
                        },
                        new
                        {
                            Id = 7,
                            ManufacturerName = "Škoda"
                        },
                        new
                        {
                            Id = 8,
                            ManufacturerName = "Ford"
                        },
                        new
                        {
                            Id = 9,
                            ManufacturerName = "Chevrolet"
                        },
                        new
                        {
                            Id = 10,
                            ManufacturerName = "Volvo"
                        },
                        new
                        {
                            Id = 11,
                            ManufacturerName = "Nissan"
                        },
                        new
                        {
                            Id = 12,
                            ManufacturerName = "Hyundai"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("carTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Limuzina"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Karavan"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Terenac"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Caddy"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Bugojno"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Mostar"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Zenica"
                        },
                        new
                        {
                            Id = 5,
                            CityName = "Tuzla"
                        },
                        new
                        {
                            Id = 6,
                            CityName = "Donji Vakuf"
                        },
                        new
                        {
                            Id = 7,
                            CityName = "Travnik"
                        },
                        new
                        {
                            Id = 8,
                            CityName = "Sanski Most"
                        },
                        new
                        {
                            Id = 9,
                            CityName = "Bihać"
                        },
                        new
                        {
                            Id = 10,
                            CityName = "Gornji Vakuf"
                        },
                        new
                        {
                            Id = 11,
                            CityName = "Skender Vakuf"
                        },
                        new
                        {
                            Id = 12,
                            CityName = "Varcar Vakuf"
                        },
                        new
                        {
                            Id = 13,
                            CityName = "Vitez"
                        },
                        new
                        {
                            Id = 14,
                            CityName = "Busovača"
                        },
                        new
                        {
                            Id = 15,
                            CityName = "Kiseljak"
                        },
                        new
                        {
                            Id = 16,
                            CityName = "Trebinje"
                        },
                        new
                        {
                            Id = 17,
                            CityName = "Nevesinje"
                        },
                        new
                        {
                            Id = 18,
                            CityName = "Prijedor"
                        },
                        new
                        {
                            Id = 19,
                            CityName = "Cazin"
                        },
                        new
                        {
                            Id = 20,
                            CityName = "Velika Kladuša"
                        },
                        new
                        {
                            Id = 21,
                            CityName = "Banja Luka"
                        },
                        new
                        {
                            Id = 22,
                            CityName = "Bosanski Brod"
                        },
                        new
                        {
                            Id = 23,
                            CityName = "Livno"
                        },
                        new
                        {
                            Id = 24,
                            CityName = "Kupres"
                        },
                        new
                        {
                            Id = 25,
                            CityName = "Tomislavgrad"
                        },
                        new
                        {
                            Id = 26,
                            CityName = "Ključ"
                        },
                        new
                        {
                            Id = 27,
                            CityName = "Srebrenica"
                        },
                        new
                        {
                            Id = 28,
                            CityName = "Posušje"
                        },
                        new
                        {
                            Id = 29,
                            CityName = "Bjeljina"
                        },
                        new
                        {
                            Id = 30,
                            CityName = "Brčko"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorTypeId");

                    b.ToTable("colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorName = "Bijela",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ColorName = "Crna",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            ColorName = "Crvena",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            ColorName = "Plava",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            ColorName = "Zelena",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            ColorName = "Siva",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            ColorName = "Smeđa",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            ColorName = "Žuta",
                            ColorTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            ColorName = "Zlatna",
                            ColorTypeId = 1
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.ColorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ColorTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("colorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorTypeName = "Metalik"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FuelTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("fuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelTypeName = "Dizel"
                        },
                        new
                        {
                            Id = 2,
                            FuelTypeName = "Benzin"
                        },
                        new
                        {
                            Id = 3,
                            FuelTypeName = "Plin"
                        },
                        new
                        {
                            Id = 4,
                            FuelTypeName = "Hibrid"
                        },
                        new
                        {
                            Id = 5,
                            FuelTypeName = "Električni automobil"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("_Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            _Gender = "Muško"
                        },
                        new
                        {
                            Id = 2,
                            _Gender = "Žensko"
                        },
                        new
                        {
                            Id = 3,
                            _Gender = "Ne želim reći"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NewsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("news");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Viewed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.RentedCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<bool>("RentApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentedTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequestCanceled")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("rentedCars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sultan Ahmedova bb",
                            BirthDate = new DateTime(1999, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Email = "ahmedt@hotmail.com",
                            FirstName = "Ahmed",
                            GenderId = 1,
                            LastName = "Terzic",
                            Password = "AdminFit!",
                            PhoneNumber = "38762650592",
                            RoleId = 1,
                            Username = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sultan Ahmedova bb",
                            BirthDate = new DateTime(1999, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 3,
                            Email = "userF@hotmail.com",
                            FirstName = "User",
                            GenderId = 1,
                            LastName = "Fit",
                            Password = "UserFit",
                            PhoneNumber = "38711254",
                            RoleId = 2,
                            Username = "UserFit"
                        });
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Car", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.CarManufacturer", "CarManufacturer")
                        .WithMany("Cars")
                        .HasForeignKey("CarManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.FuelType", "FuelType")
                        .WithMany("Cars")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarManufacturer");

                    b.Navigation("CarType");

                    b.Navigation("Color");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Color", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.ColorType", "ColorType")
                        .WithMany("Colors")
                        .HasForeignKey("ColorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorType");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Notification", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Question", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.RentedCar", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.Car", "Car")
                        .WithMany("RentedCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.User", "User")
                        .WithMany("RentedCars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.User", b =>
                {
                    b.HasOne("TaxiPlus.DAL.Domain.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiPlus.DAL.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Car", b =>
                {
                    b.Navigation("RentedCars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.CarManufacturer", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.ColorType", b =>
                {
                    b.Navigation("Colors");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.FuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaxiPlus.DAL.Domain.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Questions");

                    b.Navigation("RentedCars");
                });
#pragma warning restore 612, 618
        }
    }
}
